package devicetreeblob;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.List;
import java.util.stream.Collectors;

import devicetreeblob.parser.DtbBlock;
import devicetreeblob.parser.DtbParser;
import devicetreeblob.parser.DtbRegion;
import ghidra.framework.store.LockException;
import ghidra.program.model.address.Address;
import ghidra.program.model.address.AddressOverflowException;
import ghidra.program.model.address.AddressSpace;
import ghidra.program.model.listing.Program;
import ghidra.program.model.mem.Memory;
import ghidra.program.model.mem.MemoryBlock;
import ghidra.program.model.mem.MemoryConflictException;
import ghidra.util.Msg;
import ghidra.util.exception.CancelledException;
import ghidra.util.task.Task;
import ghidra.util.task.TaskMonitor;

public class DtbLoadTask extends Task {
	private File mFile;
	private Program mProgram;
	private Memory mMemory;
	private AddressSpace mAddrSpace;

	public DtbLoadTask(Program program, File file) {
		super("Load DTB", true, false, true, true);
		mFile = file;
		mProgram = program;
		mMemory = program.getMemory();
		mAddrSpace = mProgram.getAddressFactory().getDefaultAddressSpace();
	}

	@Override
	public void run(TaskMonitor monitor) throws CancelledException {
		monitor.setMessage("Loading " + mFile.getPath() + "...");
		monitor.checkCancelled();

		DtbParser dtb;
		try {
			dtb = new DtbParser(mFile);
		} catch (IOException | ParseException e) {
			Msg.error(getClass(), "Could not parse DTB file!", e);
			return;
		}

		monitor.setMessage("Filtering unwanted DTB blocks...");
		monitor.checkCancelled();
		List<DtbBlock> memBlocks = filterUnwantedBlocks(dtb.getBlocks());

		monitor.setMessage("Creating regions in memory...");
		monitor.checkCancelled();
		for (DtbBlock block : memBlocks)
			for (DtbRegion region : block.getRegions()) {
				String name = getBlockRegionName(block, region);
				monitor.setMessage("Processing " + name + "...");
				monitor.checkCancelled();
				processBlockRegion(name, block, region);
			}
	}

	private List<DtbBlock> filterUnwantedBlocks(List<DtbBlock> blocks) {
		return blocks.stream().filter(x -> (!x.getName().equalsIgnoreCase("cpu") && x.hasRegions()))
				.collect(Collectors.toList());
	}

	private String getBlockRegionName(DtbBlock block, DtbRegion region) {
		return block.getName() + ((region.name != null) ? ("_" + region.name) : "");
	}

	private void processBlockRegion(String name, DtbBlock block, DtbRegion region) {
		Address addr = mAddrSpace.getAddress(region.addr);
		int transactionId = mProgram.startTransaction("Device Tree Blob memory block creation");
		boolean ok = createMemoryRegion(mMemory, name, addr, region.size);
		mProgram.endTransaction(transactionId, ok);
	}

	private boolean createMemoryRegion(Memory memory, String name, Address addr, Long size) {
		try {
			MemoryBlock memBlock = memory.createUninitializedBlock(name, addr, size, false);
			boolean isRam = name.equals("memory");
			memBlock.setRead(true);
			memBlock.setWrite(true);
			memBlock.setExecute(isRam);
			memBlock.setVolatile(!isRam);
			memBlock.setComment("Generated by Device Tree Blob");
			return true;
		} catch (MemoryConflictException e) {
			Msg.error(getClass(),
					"Could not create a region for " + name + "@" + String.format("0x%08x", addr.getOffset()) + "+"
							+ String.format("0x%08x", size) + ". It conflicts with an existing region!",
					e);
		} catch (LockException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AddressOverflowException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}
}
